# -*- coding: utf-8 -*-
"""Parallelise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n7zxAU_VbfphZwU0srf4T1XcrMBeSuhp
"""

import numpy as np
np.random.seed(0)
import torch
torch.cuda.empty_cache
torch.manual_seed(0)
import random
random.seed(0)
from torch.utils.data import Dataset, DataLoader
import torch.nn as nn
from torch.nn import Module
from torch.autograd import Variable
from matplotlib import pyplot as plt
import cv2
import os
import torchvision
import PIL
import math
import pandas as pd
import shutil

import os 
import zipfile 
import tensorflow as tf 
from tensorflow.keras.preprocessing.image import ImageDataGenerator 
from tensorflow.keras import layers 
from tensorflow.keras import Model 
import matplotlib.pyplot as plt
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

!apt update && apt install -y openslide-tools
!pip install openslide-python

import openslide
import openslide.deepzoom

df = pd.read_csv("/content/drive/MyDrive/reconstructedData.csv")
df = df[df['slides__file_id'].notna()]
df = df[df['years_survived'].notna()]
df

#Get Lymph nodes 
#Split into training and validation 
#Split each training and validation into further sub-labels: <3 years and >3 years

df_lymph_nodes = df[df.biopsy_tissue_type == "Lymph"]

train_lymph_nodes, validation_lymph_nodes = np.split(df_lymph_nodes.sample(frac=1, random_state=42), 
                       [int(.8*len(df_lymph_nodes))])

train_lymph_nodes_early = train_lymph_nodes[train_lymph_nodes.years_survived <= 3]
train_lymph_nodes_late =  train_lymph_nodes[train_lymph_nodes.years_survived > 3]
validation_lymph_nodes_early = validation_lymph_nodes[validation_lymph_nodes.years_survived <= 3]
validation_lymph_nodes_late = validation_lymph_nodes[validation_lymph_nodes.years_survived > 3]

print(train_lymph_nodes_early.shape[0])
print(train_lymph_nodes_late.shape[0])
print(validation_lymph_nodes_early.shape[0])
print(validation_lymph_nodes_late.shape[0])
print(train_lymph_nodes.shape[0])
print(validation_lymph_nodes.shape[0])

lymph_training_early = train_lymph_nodes_early["slides__file_id"].to_list()
lymph_training_late = train_lymph_nodes_late["slides__file_id"].to_list()

lymph_validation_early = validation_lymph_nodes_early["slides__file_id"].to_list()
lymph_validation_late = validation_lymph_nodes_late["slides__file_id"].to_list()

print(lymph_training_early)
print(lymph_training_late)
print(lymph_validation_early)
print(lymph_validation_late)

#Get Skin 
#Split into training and validation 
#Split each training and validation into further sub-labels: <5 years and >5 years

df_skin = df[df.biopsy_tissue_type == "Skin"]

train_skin, validation_skin = np.split(df_skin.sample(frac=1, random_state=42), 
                       [int(.8*len(df_skin))])

#Label 1: early, Label 2: late
train_skin_early = train_skin[train_skin.years_survived <= 3]
train_skin_late =  train_skin[train_skin.years_survived > 3]
validation_skin_early = validation_skin[validation_skin.years_survived <= 3]
validation_skin_late = validation_skin[validation_skin.years_survived > 3]

print(train_skin_early.shape[0])
print(train_skin_late.shape[0])
print(validation_skin_early.shape[0])
print(validation_skin_late.shape[0])
print(train_skin.shape[0])
print(validation_skin.shape[0])

skin_training_early = train_skin_early["slides__file_id"].to_list()
skin_training_late = train_skin_late["slides__file_id"].to_list()

skin_validation_early = validation_skin_early["slides__file_id"].to_list()
skin_validation_late = validation_skin_late["slides__file_id"].to_list()

print(skin_training_early)
print(skin_training_late)
print(skin_validation_early)
print(skin_validation_late)

base_dir = "/content/drive/MyDrive/Data/"

'''Alternative method using OpenSlide Deepzoom'''

#Calculate percentage of tissue in image 
def calculate_tissue_percentage(img, threshold):
    img = img.copy().convert("L")   #convert to grayscale
    tissue_pixels = 0
    width, height = img.width, img.height
    total_pixels = width*height
    for x in range(width):
        for y in range(height):
            if (img.getpixel((x,y)) < threshold):     #threshold value to reject white space
                tissue_pixels += 1
    return (tissue_pixels / total_pixels) * 100

#Information on images
def slide_info_dzi(dimension, image):
  slide = openslide.OpenSlide(os.path.join(base_dir, str(image) + ".svs")) #create svs image
  tiles = openslide.deepzoom.DeepZoomGenerator(slide, dimension, 0, False) #create deepzoom object 

  level_count = tiles.level_count - 1  #Number of levels
  tile_count = tiles.tile_count        #Number of tiles
  level_tiles = tiles.level_tiles      #Number of tiles per level
  
  return level_count, level_tiles

#Crop function to create tiles and save to directory
def crop_dzi(dimension, image, level, directory): 
  slide = openslide.OpenSlide(os.path.join(base_dir, str(image) + ".svs")) #create svs image
  tiles = openslide.deepzoom.DeepZoomGenerator(slide, dimension, 0, False) #create deepzoom object 

  #create RGB tiles and filter using threshold value
  tiles_rgb = []
  loop = 0
  counter = 0

  level_count, level_tiles = slide_info_dzi(dimension, image)  
  for x in range(level_tiles[level_count - level][0]):
    for y in range(level_tiles[level_count - level][1]):
      tile_rgb = tiles.get_tile((level_count - level), (x, y))    #get tile at each column/row
      #print(calculate_tissue_percentage(tile_rgb, 200))
      if(calculate_tissue_percentage(tile_rgb, 200) >= 35):       #calculate tissue percentage
        tiles_rgb.append(tile_rgb)                                #list to track number of tiles kept
        tile_rgb.save(directory + str(image) + "_" + str(counter) + ".png")     #png image saved to directory
        counter += 1
      #print("Loop" + str(loop))
      loop += 1
  return tiles_rgb


'''image_list = ['8cfab43c-09fa-408e-84eb-f61ba2841ebc']
image = '8cfab43c-09fa-408e-84eb-f61ba2841ebc'
slide_info_dzi(512, image)'''

def generate_tiles(directory, image_list):
  dimension = 512
  level = 3
  for image in image_list:
    tiles_rgb = crop_dzi(dimension, image, level, directory)
    print("List length" + str(len(tiles_rgb)))
  
#generate_tiles("/content/drive/MyDrive/Directory/", image_list)

#skin_training_early - skin_train_dir -> early
#skin_training_late - skin_train_dir -> late
#skin_validation_early - skin_validation_dir -> early
#skin_validation_late - skin_validation_dir -> late
#do same for lymph

#shutil.move("/content/drive/MyDrive/readable_data.csv", "/content/drive/MyDrive/Directory/readable_data.csv")

base_dir_image = "/content/drive/MyDrive/Data"

#directory with early training skin images 
#directory with early validation skin images
#directory with late training late images 
#directory with late validation skin images 
generate_tiles("/content/drive/MyDrive/Data/skin_train_dir/early/", skin_training_early)
generate_tiles("/content/drive/MyDrive/Data/skin_train_dir/late/", skin_training_late)
generate_tiles("/content/drive/MyDrive/Data/skin_validation_dir/early/", skin_validation_early)
generate_tiles("/content/drive/MyDrive/Data/skin_validation_dir/late/", skin_validation_late)

#directory with early training skin images 
#directory with early validation skin images
#directory with late training late images 
#directory with late validation skin images 
generate_tiles("/content/drive/MyDrive/Data/lymph_train_dir/early/", lymph_training_early)
generate_tiles("/content/drive/MyDrive/Data/lymph_train_dir/late/", lymph_training_late)
generate_tiles("/content/drive/MyDrive/Data/lymph_validation_dir/early/", lymph_validation_early)
generate_tiles("/content/drive/MyDrive/Data/lymph_validation_dir/late/", lymph_validation_late)