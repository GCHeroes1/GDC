# -*- coding: utf-8 -*-
"""TrainData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xDnatv5n--BZXTpk6i1HYuEWoFBuTyFH
"""

import numpy as np
# import torch
import random
from PIL import Image
import os
import tensorflow as tf
from tensorflow.python.keras.preprocessing.image import ImageDataGenerator
from tensorflow.python.keras import layers
from tensorflow.python.keras.applications.inception_v3 import InceptionV3
from tensorflow.python.keras.optimizers import RMSprop
from tensorflow import keras


np.random.seed(0)
# torch.cuda.empty_cache()
# torch.manual_seed(0)
random.seed(0)

# blaze
root_dir = "/scratch0/NOT_BACKED_UP/tmp/GCDData/"
# not blaze
# root_dir = "/tmp/GCDData/"

im = Image.open(f"{root_dir}skin_train_dir/late/00ded484-9e77-4242-96a3-b09996fd0231_11.png")
width, height = im.size

# skin_train_dir = f"{root_dir}skin_train_dir"
# skin_validation_dir = f"{root_dir}skin_validation_dir"
lymph_train_dir = f"{root_dir}lymph_train_dir"
lymph_validation_dir = f"{root_dir}lymph_validation_dir"

# Add our data-augmentation parameters to ImageDataGenerator
train_datagen = ImageDataGenerator()
test_datagen = ImageDataGenerator()

b_s = 1 # batch_size
len_train = len(os.listdir(lymph_train_dir + "/early")) + len(os.listdir(lymph_train_dir + "/late"))
validation_steps = len(os.listdir(lymph_validation_dir + "/early")) + len(os.listdir(lymph_validation_dir + "/late"))//b_s
print(f"Validation steps: {validation_steps}")
# len_train
s_s = len_train//b_s
print("Batch size: " + str(b_s))
print("Sample size: " + str(len_train))
print("Steps per epoch: " + str(s_s))

train_generator = train_datagen.flow_from_directory(lymph_train_dir, batch_size = b_s, class_mode = 'binary', target_size = (1024, 1024))
validation_generator = test_datagen.flow_from_directory(lymph_validation_dir, batch_size = b_s, class_mode = 'binary', target_size = (1024, 1024))

base_model = InceptionV3(input_shape = (1024, 1024, 3), include_top = False, weights = 'imagenet')

for layer in base_model.layers:
    layer.trainable = False

x = layers.Flatten()(base_model.output)
x = layers.Dense(64, activation='relu')(x)
x = layers.Dropout(0.2)(x)
x = layers.Dense(1, activation='sigmoid')(x)

model = tf.keras.models.Model(base_model.input, x)

model.compile(optimizer = RMSprop(lr=0.001), loss = 'binary_crossentropy', metrics = ['acc'])
print("model compiled")

inc_history = model.fit_generator(train_generator, validation_data = validation_generator, steps_per_epoch = s_s, epochs = 10, validation_steps=validation_steps)
print("model trained")

model.save("/scratch0/NOT_BACKED_UP/tmp/GPUModelLymph_1_64")

# model = keras.models.load_model('model')
